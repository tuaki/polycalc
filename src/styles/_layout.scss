/**
 * Prevent scrollbar from affecting the width.
 */
 @mixin scrollbar-fix {
    overflow: auto;
    scrollbar-gutter: stable;
}

@mixin scrollbar-center {
    scrollbar-gutter: stable both-edges;
}

/**
 * This will be the main scrolling element unless there is a another one inside. So the most nested one will be the main scroller.
 * This way, child components can override their parents.
 */
.pc-main-scroller:not(:has(.pc-main-scroller)) {
    @include scrollbar-fix;

    &:not(.pc-main-scroller-no-center) {
        @include scrollbar-center;
    }

    height: 100%;
}

$preferencesWidth: 300px;
$preferencesCollapsedWidth: 56px;

.pc-layout {
    @extend .pc-main-scroller;
    @extend .pc-main-scroller-no-center;
    display: grid;
    transition: 300ms;

    grid-template-rows: auto 1fr;
}

.pc-preferences {
    grid-column-start: 1;
    grid-row-start: 1;
}

.pc-content {
    grid-column-start: 1;
    grid-row-start: 2;
    min-width: 0px;
}

@media (screen(md)) {
    .pc-layout {
        --preferences-width: #{$preferencesWidth};
        grid-template-columns: var(--preferences-width) auto;
        grid-template-rows: auto;

        &.pc-preferences-collapsed {
            --preferences-width: #{$preferencesCollapsedWidth};
        }
    }
    
    .pc-content {
        grid-column-start: 2;
        grid-row-start: 1;

        /**
         * This hack allows a compoenent to be centered relative to the screen, not just the content. However, it's not needed now.
         */
        .pc-centered {
            display: grid;
            transition: 300ms;
            grid-template-columns: auto var(--preferences-width);
        }
    }
}

$minContentWidth: 800px;

/**
 * If there is enough space, the element will start at 800px and grow as needed with its content.
 * However, it will never be larger than its parent.
 */
.pc-fit-min-800 {
    width: fit-content;
    min-width: min(100%, $minContentWidth);
    max-width: 100%;
}

// Overrides for the collapsed layout

.pc-preferences-collapsed {
    .collapsed-md\:grid-cols-4 {
        @media (screen(md)) {
            grid-template-columns: repeat(4, 1fr);
        }
    }
}